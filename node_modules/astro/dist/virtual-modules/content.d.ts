import { z } from 'zod';
export { z };
export type ImageFunction = () => z.ZodObject<{
    src: z.ZodString;
    width: z.ZodNumber;
    height: z.ZodNumber;
    format: z.ZodUnion<[
        z.ZodLiteral<'png'>,
        z.ZodLiteral<'jpg'>,
        z.ZodLiteral<'jpeg'>,
        z.ZodLiteral<'tiff'>,
        z.ZodLiteral<'webp'>,
        z.ZodLiteral<'gif'>,
        z.ZodLiteral<'svg'>,
        z.ZodLiteral<'avif'>
    ]>;
}>;
type BaseSchemaWithoutEffects = z.AnyZodObject | z.ZodUnion<[BaseSchemaWithoutEffects, ...BaseSchemaWithoutEffects[]]> | z.ZodDiscriminatedUnion<string, z.AnyZodObject[]> | z.ZodIntersection<BaseSchemaWithoutEffects, BaseSchemaWithoutEffects>;
type BaseSchema = BaseSchemaWithoutEffects | z.ZodEffects<BaseSchemaWithoutEffects>;
export type SchemaContext = {
    image: ImageFunction;
};
type DataCollectionConfig<S extends BaseSchema> = {
    type: 'data';
    schema?: S | ((context: SchemaContext) => S);
};
type ContentCollectionConfig<S extends BaseSchema> = {
    type?: 'content';
    schema?: S | ((context: SchemaContext) => S);
};
type CollectionConfig<S extends BaseSchema> = ContentCollectionConfig<S> | DataCollectionConfig<S>;
export declare function defineCollection<S extends BaseSchema>(input: CollectionConfig<S>): CollectionConfig<S>;
/** Run `astro sync` to generate high fidelity types */
export declare const getEntryBySlug: (...args: any[]) => any;
/** Run `astro sync` to generate high fidelity types */
export declare const getDataEntryById: (...args: any[]) => any;
/** Run `astro sync` to generate high fidelity types */
export declare const getCollection: (...args: any[]) => any;
/** Run `astro sync` to generate high fidelity types */
export declare const getEntry: (...args: any[]) => any;
/** Run `astro sync` to generate high fidelity types */
export declare const getEntries: (...args: any[]) => any;
/** Run `astro sync` to generate high fidelity types */
export declare const reference: (...args: any[]) => any;
/** Run `astro sync` to generate high fidelity types */
export type CollectionKey = any;
/** Run `astro sync` to generate high fidelity types */
export type CollectionEntry<C> = any;
/** Run `astro sync` to generate high fidelity types */
export type ContentCollectionKey = any;
/** Run `astro sync` to generate high fidelity types */
export type DataCollectionKey = any;
/** Run `astro sync` to generate high fidelity types */
export type ContentConfig = any;
