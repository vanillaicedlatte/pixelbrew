import {
  __commonJS
} from "./chunk-Y2F7D3TJ.js";

// node_modules/postmark/dist/client/errors/Errors.js
var require_Errors = __commonJS({
  "node_modules/postmark/dist/client/errors/Errors.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidEmailRequestError = exports.InactiveRecipientsError = exports.ApiInputError = exports.UnknownError = exports.RateLimitExceededError = exports.ServiceUnavailablerError = exports.InternalServerError = exports.InvalidAPIKeyError = exports.HttpError = exports.PostmarkError = void 0;
    var PostmarkError = (
      /** @class */
      function(_super) {
        __extends(PostmarkError2, _super);
        function PostmarkError2(message, code, statusCode) {
          if (code === void 0) {
            code = 0;
          }
          if (statusCode === void 0) {
            statusCode = 0;
          }
          var _this = _super.call(this, message) || this;
          _this.statusCode = statusCode;
          _this.code = code;
          Object.setPrototypeOf(_this, PostmarkError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        PostmarkError2.prototype.setUpStackTrace = function() {
          this.name = this.constructor.name;
          Error.captureStackTrace(this, this.constructor);
        };
        return PostmarkError2;
      }(Error)
    );
    exports.PostmarkError = PostmarkError;
    var HttpError = (
      /** @class */
      function(_super) {
        __extends(HttpError2, _super);
        function HttpError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, HttpError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return HttpError2;
      }(PostmarkError)
    );
    exports.HttpError = HttpError;
    var InvalidAPIKeyError = (
      /** @class */
      function(_super) {
        __extends(InvalidAPIKeyError2, _super);
        function InvalidAPIKeyError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, InvalidAPIKeyError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return InvalidAPIKeyError2;
      }(HttpError)
    );
    exports.InvalidAPIKeyError = InvalidAPIKeyError;
    var InternalServerError = (
      /** @class */
      function(_super) {
        __extends(InternalServerError2, _super);
        function InternalServerError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, InternalServerError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return InternalServerError2;
      }(HttpError)
    );
    exports.InternalServerError = InternalServerError;
    var ServiceUnavailablerError = (
      /** @class */
      function(_super) {
        __extends(ServiceUnavailablerError2, _super);
        function ServiceUnavailablerError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, ServiceUnavailablerError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return ServiceUnavailablerError2;
      }(HttpError)
    );
    exports.ServiceUnavailablerError = ServiceUnavailablerError;
    var RateLimitExceededError = (
      /** @class */
      function(_super) {
        __extends(RateLimitExceededError2, _super);
        function RateLimitExceededError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, RateLimitExceededError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return RateLimitExceededError2;
      }(HttpError)
    );
    exports.RateLimitExceededError = RateLimitExceededError;
    var UnknownError = (
      /** @class */
      function(_super) {
        __extends(UnknownError2, _super);
        function UnknownError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, UnknownError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return UnknownError2;
      }(HttpError)
    );
    exports.UnknownError = UnknownError;
    var ApiInputError = (
      /** @class */
      function(_super) {
        __extends(ApiInputError2, _super);
        function ApiInputError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, ApiInputError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        ApiInputError2.buildSpecificError = function(message, code, statusCode) {
          switch (code) {
            case this.ERROR_CODES.inactiveRecipient:
              return new InactiveRecipientsError(message, code, statusCode);
            case this.ERROR_CODES.invalidEmailRequest:
              return new InvalidEmailRequestError(message, code, statusCode);
            default:
              return new ApiInputError2(message, code, statusCode);
          }
        };
        ApiInputError2.ERROR_CODES = {
          inactiveRecipient: 406,
          invalidEmailRequest: 300
        };
        return ApiInputError2;
      }(HttpError)
    );
    exports.ApiInputError = ApiInputError;
    var InactiveRecipientsError = (
      /** @class */
      function(_super) {
        __extends(InactiveRecipientsError2, _super);
        function InactiveRecipientsError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, InactiveRecipientsError2.prototype);
          _this.setUpStackTrace();
          _this.recipients = InactiveRecipientsError2.parseInactiveRecipients(message);
          return _this;
        }
        InactiveRecipientsError2.parseInactiveRecipients = function(message) {
          var result = [];
          this.inactiveRecipientsPatterns.some(function(pattern) {
            var regexResult = message.match(pattern);
            if (regexResult !== null) {
              result = regexResult[1].split(",").map(function(element) {
                return element.trim();
              });
              return result;
            } else {
              result = [];
            }
          });
          return result;
        };
        InactiveRecipientsError2.inactiveRecipientsPatterns = [
          /Found inactive addresses: (.+?)\.? Inactive/,
          /these inactive addresses: (.+?)\.?$/
        ];
        return InactiveRecipientsError2;
      }(ApiInputError)
    );
    exports.InactiveRecipientsError = InactiveRecipientsError;
    var InvalidEmailRequestError = (
      /** @class */
      function(_super) {
        __extends(InvalidEmailRequestError2, _super);
        function InvalidEmailRequestError2(message, code, statusCode) {
          var _this = _super.call(this, message, code, statusCode) || this;
          Object.setPrototypeOf(_this, InvalidEmailRequestError2.prototype);
          _this.setUpStackTrace();
          return _this;
        }
        return InvalidEmailRequestError2;
      }(ApiInputError)
    );
    exports.InvalidEmailRequestError = InvalidEmailRequestError;
  }
});

// node_modules/postmark/dist/client/errors/ErrorHandler.js
var require_ErrorHandler = __commonJS({
  "node_modules/postmark/dist/client/errors/ErrorHandler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ErrorHandler = void 0;
    var Errors = require_Errors();
    var ErrorHandler = (
      /** @class */
      function() {
        function ErrorHandler2() {
        }
        ErrorHandler2.prototype.buildError = function(errorMessage, code, statusCode) {
          if (code === void 0) {
            code = 0;
          }
          if (statusCode === void 0) {
            statusCode = 0;
          }
          if (statusCode === 0 && code === 0) {
            return new Errors.PostmarkError(errorMessage);
          } else {
            return this.buildErrorByHttpStatusCode(errorMessage, code, statusCode);
          }
        };
        ErrorHandler2.prototype.buildErrorByHttpStatusCode = function(errorMessage, errorCode, errorStatusCode) {
          switch (errorStatusCode) {
            case 401:
              return new Errors.InvalidAPIKeyError(errorMessage, errorCode, errorStatusCode);
            case 404:
              return new Errors.PostmarkError(errorMessage, errorCode, errorStatusCode);
            case 422:
              return Errors.ApiInputError.buildSpecificError(errorMessage, errorCode, errorStatusCode);
            case 429:
              return new Errors.RateLimitExceededError(errorMessage, errorCode, errorStatusCode);
            case 500:
              return new Errors.InternalServerError(errorMessage, errorCode, errorStatusCode);
            case 503:
              return new Errors.ServiceUnavailablerError(errorMessage, errorCode, errorStatusCode);
            default:
              return new Errors.UnknownError(errorMessage, errorCode, errorStatusCode);
          }
        };
        return ErrorHandler2;
      }()
    );
    exports.ErrorHandler = ErrorHandler;
  }
});

// node_modules/axios/dist/browser/axios.cjs
var require_axios = __commonJS({
  "node_modules/axios/dist/browser/axios.cjs"(exports, module) {
    "use strict";
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    var typeOfTest = (type) => (thing) => typeof thing === type;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined")
        return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }
    var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    var stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null)
        return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing)
        return null;
      if (isArray(thing))
        return thing;
      let i = thing.length;
      if (!isNumber(i))
        return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value))
          return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      value = +value;
      return Number.isFinite(value) ? value : defaultValue;
    };
    var ALPHA = "abcdefghijklmnopqrstuvwxyz";
    var DIGIT = "0123456789";
    var ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var utils$1 = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var httpAdapter = null;
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path)
        return key;
      return path.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils$1.isUndefined(value))
          return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode;
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    var FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    var Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    var platform$1 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    var hasStandardBrowserEnv = ((product) => {
      return hasBrowserEnv && ["ReactNative", "NativeScript", "NS"].indexOf(product) < 0;
    })(typeof navigator !== "undefined" && navigator.product);
    var hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var utils = Object.freeze({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      hasStandardBrowserEnv
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];
        if (name === "__proto__")
          return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value, target[name], index);
        if (result && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
      if (utils$1.isFunction(filter)) {
        return filter.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value))
        return;
      if (utils$1.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }
      if (utils$1.isRegExp(filter)) {
        return filter.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        const msie = /(msie|trident)/i.test(navigator.userAgent);
        const urlParsingNode = document.createElement("a");
        let originURL;
        function resolveURL(url) {
          let href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin2(requestURL) {
          const parsed = utils$1.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return function isURLSameOrigin2() {
          return true;
        };
      }()
    );
    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function progressEventReducer(listener, isDownloadStream) {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return (e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e
        };
        data[isDownloadStream ? "download" : "upload"] = true;
        listener(data);
      };
    }
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        let requestData = config.data;
        const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
        let { responseType, withXSRFToken } = config;
        let onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        let contentType;
        if (utils$1.isFormData(requestData)) {
          if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
            requestHeaders.setContentType(false);
          } else if ((contentType = requestHeaders.getContentType()) !== false) {
            const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
            requestHeaders.setContentType([type || "multipart/form-data", ...tokens].join("; "));
          }
        }
        let request = new XMLHttpRequest();
        if (config.auth) {
          const username = config.auth.username || "";
          const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
        }
        const fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (platform.hasStandardBrowserEnv) {
          withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));
          if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(fullPath)) {
            const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies.read(config.xsrfCookieName);
            if (xsrfValue) {
              requestHeaders.set(config.xsrfHeaderName, xsrfValue);
            }
          }
        }
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", progressEventReducer(config.onDownloadProgress, true));
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", progressEventReducer(config.onUploadProgress));
        }
        if (config.cancelToken || config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(fullPath);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason = (reason) => `- ${reason}`;
    var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          let id;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b, caseless) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(a, b, caseless);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a, caseless);
        }
      }
      function valueFromConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var VERSION = "1.6.8";
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy;
            Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            if (!err.stack) {
              err.stack = stack;
            } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
              err.stack += "\n" + stack;
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class _CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners)
            return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new _CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module.exports = axios;
  }
});

// node_modules/postmark/dist/client/models/client/ClientOptions.js
var require_ClientOptions = __commonJS({
  "node_modules/postmark/dist/client/models/client/ClientOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClientOptions = void 0;
    var ClientOptions;
    (function(ClientOptions2) {
      var Configuration = (
        /** @class */
        /* @__PURE__ */ function() {
          function Configuration2(useHttps, requestHost, timeout) {
            this.useHttps = useHttps;
            this.requestHost = requestHost;
            this.timeout = timeout;
          }
          return Configuration2;
        }()
      );
      ClientOptions2.Configuration = Configuration;
      var HttpMethod;
      (function(HttpMethod2) {
        HttpMethod2["GET"] = "GET";
        HttpMethod2["POST"] = "POST";
        HttpMethod2["DELETE"] = "DELETE";
        HttpMethod2["PUT"] = "PUT";
        HttpMethod2["OPTIONS"] = "OPTIONS";
        HttpMethod2["HEAD"] = "HEAD";
        HttpMethod2["PATCH"] = "PATCH";
      })(HttpMethod = ClientOptions2.HttpMethod || (ClientOptions2.HttpMethod = {}));
      var AuthHeaderNames;
      (function(AuthHeaderNames2) {
        AuthHeaderNames2["SERVER_TOKEN"] = "X-Postmark-Server-Token";
        AuthHeaderNames2["ACCOUNT_TOKEN"] = "X-Postmark-Account-Token";
      })(AuthHeaderNames = ClientOptions2.AuthHeaderNames || (ClientOptions2.AuthHeaderNames = {}));
    })(ClientOptions = exports.ClientOptions || (exports.ClientOptions = {}));
  }
});

// node_modules/postmark/dist/client/models/client/SupportingTypes.js
var require_SupportingTypes = __commonJS({
  "node_modules/postmark/dist/client/models/client/SupportingTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/client/HttpClient.js
var require_HttpClient = __commonJS({
  "node_modules/postmark/dist/client/models/client/HttpClient.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpClient = void 0;
    var HttpClient = (
      /** @class */
      function() {
        function HttpClient2(configOptions) {
          this.clientOptions = __assign(__assign({}, HttpClient2.DefaultOptions), configOptions);
          this.initHttpClient(this.clientOptions);
        }
        HttpClient2.prototype.getBaseHttpRequestURL = function() {
          var scheme = this.clientOptions.useHttps ? "https" : "http";
          return "".concat(scheme, "://").concat(this.clientOptions.requestHost);
        };
        HttpClient2.DefaultOptions = {
          useHttps: true,
          requestHost: "api.postmarkapp.com",
          timeout: 180
        };
        return HttpClient2;
      }()
    );
    exports.HttpClient = HttpClient;
  }
});

// node_modules/postmark/dist/client/models/client/Callback.js
var require_Callback = __commonJS({
  "node_modules/postmark/dist/client/models/client/Callback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/client/DefaultResponse.js
var require_DefaultResponse = __commonJS({
  "node_modules/postmark/dist/client/models/client/DefaultResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/client/FilteringParameters.js
var require_FilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/client/FilteringParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilteringParameters = void 0;
    var FilteringParameters = (
      /** @class */
      /* @__PURE__ */ function() {
        function FilteringParameters2(count, offset) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          this.count = count;
          this.offset = offset;
        }
        return FilteringParameters2;
      }()
    );
    exports.FilteringParameters = FilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/bounces/Bounce.js
var require_Bounce = __commonJS({
  "node_modules/postmark/dist/client/models/bounces/Bounce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BounceTypeCode = exports.BounceType = void 0;
    var BounceType;
    (function(BounceType2) {
      BounceType2["HardBounce"] = "HardBounce";
      BounceType2["Transient"] = "Transient";
      BounceType2["Unsubscribe"] = "Unsubscribe";
      BounceType2["Subscribe"] = "Subscribe";
      BounceType2["AutoResponder"] = "AutoResponder";
      BounceType2["AddressChange"] = "AddressChange";
      BounceType2["DnsError"] = "DnsError";
      BounceType2["SpamNotification"] = "SpamNotification";
      BounceType2["OpenRelayTest"] = "OpenRelayTest";
      BounceType2["Unknown"] = "Unknown";
      BounceType2["SoftBounce"] = "SoftBounce";
      BounceType2["VirusNotification"] = "VirusNotification";
      BounceType2["ChallengeVerification"] = "ChallengeVerification";
      BounceType2["BadEmailAddress"] = "BadEmailAddress";
      BounceType2["SpamComplaint"] = "SpamComplaint";
      BounceType2["ManuallyDeactivated"] = "ManuallyDeactivated";
      BounceType2["Unconfirmed"] = "Unconfirmed";
      BounceType2["Blocked"] = "Blocked";
      BounceType2["SMTPApiError"] = "SMTPApiError";
      BounceType2["InboundError"] = "InboundError";
      BounceType2["DMARCPolicy"] = "DMARCPolicy";
      BounceType2["TemplateRenderingFailed"] = "TemplateRenderingFailed";
    })(BounceType = exports.BounceType || (exports.BounceType = {}));
    var BounceTypeCode;
    (function(BounceTypeCode2) {
      BounceTypeCode2[BounceTypeCode2["HardBounce"] = 1] = "HardBounce";
      BounceTypeCode2[BounceTypeCode2["Transient"] = 2] = "Transient";
      BounceTypeCode2[BounceTypeCode2["Unsubscribe"] = 16] = "Unsubscribe";
      BounceTypeCode2[BounceTypeCode2["Subscribe"] = 32] = "Subscribe";
      BounceTypeCode2[BounceTypeCode2["AutoResponder"] = 64] = "AutoResponder";
      BounceTypeCode2[BounceTypeCode2["AddressChange"] = 128] = "AddressChange";
      BounceTypeCode2[BounceTypeCode2["DnsError"] = 256] = "DnsError";
      BounceTypeCode2[BounceTypeCode2["SpamNotification"] = 512] = "SpamNotification";
      BounceTypeCode2[BounceTypeCode2["OpenRelayTest"] = 1024] = "OpenRelayTest";
      BounceTypeCode2[BounceTypeCode2["Unknown"] = 2048] = "Unknown";
      BounceTypeCode2[BounceTypeCode2["SoftBounce"] = 4096] = "SoftBounce";
      BounceTypeCode2[BounceTypeCode2["VirusNotification"] = 8192] = "VirusNotification";
      BounceTypeCode2[BounceTypeCode2["ChallengeVerification"] = 16384] = "ChallengeVerification";
      BounceTypeCode2[BounceTypeCode2["BadEmailAddress"] = 1e5] = "BadEmailAddress";
      BounceTypeCode2[BounceTypeCode2["SpamComplaint"] = 100001] = "SpamComplaint";
      BounceTypeCode2[BounceTypeCode2["ManuallyDeactivated"] = 100002] = "ManuallyDeactivated";
      BounceTypeCode2[BounceTypeCode2["Unconfirmed"] = 100003] = "Unconfirmed";
      BounceTypeCode2[BounceTypeCode2["Blocked"] = 100006] = "Blocked";
      BounceTypeCode2[BounceTypeCode2["SMTPApiError"] = 100007] = "SMTPApiError";
      BounceTypeCode2[BounceTypeCode2["InboundError"] = 100008] = "InboundError";
      BounceTypeCode2[BounceTypeCode2["DMARCPolicy"] = 100009] = "DMARCPolicy";
      BounceTypeCode2[BounceTypeCode2["TemplateRenderingFailed"] = 100010] = "TemplateRenderingFailed";
    })(BounceTypeCode = exports.BounceTypeCode || (exports.BounceTypeCode = {}));
  }
});

// node_modules/postmark/dist/client/models/bounces/BounceFilteringParameters.js
var require_BounceFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/bounces/BounceFilteringParameters.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BounceFilteringParameters = void 0;
    var FilteringParameters_1 = require_FilteringParameters();
    var BounceFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(BounceFilteringParameters2, _super);
        function BounceFilteringParameters2(count, offset, type, inactive, emailFilter, tag, messageID, fromDate, toDate, messageStream) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.type = type;
          _this.inactive = inactive;
          _this.emailFilter = emailFilter;
          _this.tag = tag;
          _this.messageID = messageID;
          _this.fromDate = fromDate;
          _this.toDate = toDate;
          _this.messageStream = messageStream;
          return _this;
        }
        return BounceFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.BounceFilteringParameters = BounceFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/message/Message.js
var require_Message = __commonJS({
  "node_modules/postmark/dist/client/models/message/Message.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Message = void 0;
    var Message = (
      /** @class */
      /* @__PURE__ */ function() {
        function Message2(From, Subject, HtmlBody, TextBody, To, Cc, Bcc, ReplyTo, Tag, TrackOpens, TrackLinks, Headers, Attachments, Metadata) {
          this.From = From;
          this.To = To;
          this.Cc = Cc;
          this.Bcc = Bcc;
          this.Subject = Subject;
          this.ReplyTo = ReplyTo;
          this.HtmlBody = HtmlBody;
          this.TextBody = TextBody;
          this.Tag = Tag;
          this.TrackOpens = TrackOpens;
          this.TrackLinks = TrackLinks;
          this.Headers = Headers;
          this.Attachments = Attachments;
          this.Metadata = Metadata;
        }
        return Message2;
      }()
    );
    exports.Message = Message;
  }
});

// node_modules/postmark/dist/client/models/message/SupportingTypes.js
var require_SupportingTypes2 = __commonJS({
  "node_modules/postmark/dist/client/models/message/SupportingTypes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Attachment = exports.Header = exports.ServerDeliveryTypes = exports.LinkClickLocation = exports.LinkTrackingOptions = void 0;
    var LinkTrackingOptions;
    (function(LinkTrackingOptions2) {
      LinkTrackingOptions2["TextOnly"] = "TextOnly";
      LinkTrackingOptions2["HtmlOnly"] = "HtmlOnly";
      LinkTrackingOptions2["HtmlAndText"] = "HtmlAndText";
      LinkTrackingOptions2["None"] = "None";
    })(LinkTrackingOptions = exports.LinkTrackingOptions || (exports.LinkTrackingOptions = {}));
    var LinkClickLocation;
    (function(LinkClickLocation2) {
      LinkClickLocation2["HTML"] = "HTML";
      LinkClickLocation2["Text"] = "Text";
    })(LinkClickLocation = exports.LinkClickLocation || (exports.LinkClickLocation = {}));
    var ServerDeliveryTypes;
    (function(ServerDeliveryTypes2) {
      ServerDeliveryTypes2["Live"] = "Live";
      ServerDeliveryTypes2["Sandbox"] = "Sandbox";
    })(ServerDeliveryTypes = exports.ServerDeliveryTypes || (exports.ServerDeliveryTypes = {}));
    var Header = (
      /** @class */
      /* @__PURE__ */ function() {
        function Header2(Name, Value) {
          this.Name = Name;
          this.Value = Value;
        }
        return Header2;
      }()
    );
    exports.Header = Header;
    var Attachment = (
      /** @class */
      /* @__PURE__ */ function() {
        function Attachment2(Name, Content, ContentType, ContentID, ContentLength) {
          if (ContentID === void 0) {
            ContentID = null;
          }
          this.Name = Name;
          this.Content = Content;
          this.ContentType = ContentType;
          this.ContentID = ContentID;
          this.ContentLength = ContentLength;
        }
        return Attachment2;
      }()
    );
    exports.Attachment = Attachment;
  }
});

// node_modules/postmark/dist/client/models/messages/OutboundMessage.js
var require_OutboundMessage = __commonJS({
  "node_modules/postmark/dist/client/models/messages/OutboundMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/messages/OutboundMessageOpen.js
var require_OutboundMessageOpen = __commonJS({
  "node_modules/postmark/dist/client/models/messages/OutboundMessageOpen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/messages/OutboundMessageClick.js
var require_OutboundMessageClick = __commonJS({
  "node_modules/postmark/dist/client/models/messages/OutboundMessageClick.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/messages/InboundMessage.js
var require_InboundMessage = __commonJS({
  "node_modules/postmark/dist/client/models/messages/InboundMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/messages/MessageFilteringParameters.js
var require_MessageFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/messages/MessageFilteringParameters.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OutboundMessageClicksFilteringParameters = exports.OutboundMessageOpensFilteringParameters = exports.OutboundMessageTrackingFilteringParameters = exports.InboundMessagesFilteringParameters = exports.OutboundMessagesFilteringParameters = exports.InboundMessageStatus = exports.OutboundMessageStatus = void 0;
    var FilteringParameters_1 = require_FilteringParameters();
    var OutboundMessageStatus;
    (function(OutboundMessageStatus2) {
      OutboundMessageStatus2["Queued"] = "queued";
      OutboundMessageStatus2["Sent"] = "sent";
      OutboundMessageStatus2["Processed"] = "processed";
    })(OutboundMessageStatus = exports.OutboundMessageStatus || (exports.OutboundMessageStatus = {}));
    var InboundMessageStatus;
    (function(InboundMessageStatus2) {
      InboundMessageStatus2["Queued"] = "queued";
      InboundMessageStatus2["Sent"] = "sent";
      InboundMessageStatus2["Processed"] = "processed";
      InboundMessageStatus2["Blocked"] = "blocked";
      InboundMessageStatus2["Failed"] = "failed";
      InboundMessageStatus2["Scheduled"] = "scheduled";
    })(InboundMessageStatus = exports.InboundMessageStatus || (exports.InboundMessageStatus = {}));
    var OutboundMessagesFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(OutboundMessagesFilteringParameters2, _super);
        function OutboundMessagesFilteringParameters2(count, offset, recipient, fromEmail, tag, status, fromDate, toDate, subject, messageStream) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.recipient = recipient;
          _this.fromEmail = fromEmail;
          _this.tag = tag;
          _this.status = status;
          _this.fromDate = fromDate;
          _this.toDate = toDate;
          _this.subject = subject;
          _this.messageStream = messageStream;
          return _this;
        }
        return OutboundMessagesFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.OutboundMessagesFilteringParameters = OutboundMessagesFilteringParameters;
    var InboundMessagesFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(InboundMessagesFilteringParameters2, _super);
        function InboundMessagesFilteringParameters2(count, offset, mailboxHash, recipient, fromEmail, tag, status, fromDate, toDate, subject) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.status = status;
          _this.mailboxHash = mailboxHash;
          _this.recipient = recipient;
          _this.fromEmail = fromEmail;
          _this.tag = tag;
          _this.fromDate = fromDate;
          _this.toDate = toDate;
          _this.subject = subject;
          return _this;
        }
        return InboundMessagesFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.InboundMessagesFilteringParameters = InboundMessagesFilteringParameters;
    var OutboundMessageTrackingFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(OutboundMessageTrackingFilteringParameters2, _super);
        function OutboundMessageTrackingFilteringParameters2(count, offset, recipient, tag, client_name, client_company, client_family, os_name, os_family, os_company, platform, country, region, city, messageStream) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.recipient = recipient;
          _this.tag = tag;
          _this.client_name = client_name;
          _this.client_company = client_company;
          _this.client_family = client_family;
          _this.os_name = os_name;
          _this.os_family = os_family;
          _this.os_company = os_company;
          _this.platform = platform;
          _this.country = country;
          _this.region = region;
          _this.city = city;
          _this.messageStream = messageStream;
          return _this;
        }
        return OutboundMessageTrackingFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.OutboundMessageTrackingFilteringParameters = OutboundMessageTrackingFilteringParameters;
    var OutboundMessageOpensFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(OutboundMessageOpensFilteringParameters2, _super);
        function OutboundMessageOpensFilteringParameters2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return OutboundMessageOpensFilteringParameters2;
      }(OutboundMessageTrackingFilteringParameters)
    );
    exports.OutboundMessageOpensFilteringParameters = OutboundMessageOpensFilteringParameters;
    var OutboundMessageClicksFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(OutboundMessageClicksFilteringParameters2, _super);
        function OutboundMessageClicksFilteringParameters2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        return OutboundMessageClicksFilteringParameters2;
      }(OutboundMessageTrackingFilteringParameters)
    );
    exports.OutboundMessageClicksFilteringParameters = OutboundMessageClicksFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/templates/Template.js
var require_Template = __commonJS({
  "node_modules/postmark/dist/client/models/templates/Template.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TemplateFilteringParameters = exports.TemplatedMessage = exports.TemplatesPushRequest = exports.TemplateTypes = exports.TemplateValidationOptions = exports.CreateTemplateRequest = exports.UpdateTemplateRequest = void 0;
    var FilteringParameters_1 = require_FilteringParameters();
    var UpdateTemplateRequest = (
      /** @class */
      /* @__PURE__ */ function() {
        function UpdateTemplateRequest2(Name, Subject, HtmlBody, TextBody, Alias, TemplateType, LayoutTemplate) {
          this.Name = Name;
          this.Subject = Subject;
          this.HtmlBody = HtmlBody;
          this.TextBody = TextBody;
          this.Alias = Alias;
          this.LayoutTemplate = LayoutTemplate;
          this.TemplateType = TemplateType;
        }
        return UpdateTemplateRequest2;
      }()
    );
    exports.UpdateTemplateRequest = UpdateTemplateRequest;
    var CreateTemplateRequest = (
      /** @class */
      function(_super) {
        __extends(CreateTemplateRequest2, _super);
        function CreateTemplateRequest2(Name, Subject, HtmlBody, TextBody, Alias, TemplateType, LayoutTemplate) {
          return _super.call(this, Name, Subject, HtmlBody, TextBody, Alias, TemplateType, LayoutTemplate) || this;
        }
        return CreateTemplateRequest2;
      }(UpdateTemplateRequest)
    );
    exports.CreateTemplateRequest = CreateTemplateRequest;
    var TemplateValidationOptions = (
      /** @class */
      /* @__PURE__ */ function() {
        function TemplateValidationOptions2(Subject, HtmlBody, TextBody, TestRenderModel, TemplateType, LayoutTemplate, InlineCssForHtmlTestRender) {
          this.Subject = Subject;
          this.HtmlBody = HtmlBody;
          this.TextBody = TextBody;
          this.TestRenderModel = TestRenderModel;
          this.TemplateType = TemplateType;
          this.LayoutTemplate = LayoutTemplate;
          this.InlineCssForHtmlTestRender = InlineCssForHtmlTestRender;
        }
        return TemplateValidationOptions2;
      }()
    );
    exports.TemplateValidationOptions = TemplateValidationOptions;
    var TemplateTypes;
    (function(TemplateTypes2) {
      TemplateTypes2["Standard"] = "Standard";
      TemplateTypes2["Layout"] = "Layout";
    })(TemplateTypes = exports.TemplateTypes || (exports.TemplateTypes = {}));
    var TemplatesPushRequest = (
      /** @class */
      /* @__PURE__ */ function() {
        function TemplatesPushRequest2(SourceServerID, DestinationServerID, PerformChanges) {
          this.SourceServerID = SourceServerID;
          this.DestinationServerID = DestinationServerID;
          this.PerformChanges = PerformChanges;
        }
        return TemplatesPushRequest2;
      }()
    );
    exports.TemplatesPushRequest = TemplatesPushRequest;
    var TemplatedMessage = (
      /** @class */
      /* @__PURE__ */ function() {
        function TemplatedMessage2(from, templateIdOrAlias, templateModel, to, cc, bcc, replyTo, tag, trackOpens, trackLinks, headers, attachments) {
          this.From = from;
          this.TemplateModel = templateModel;
          if (typeof templateIdOrAlias === "number") {
            this.TemplateId = templateIdOrAlias;
          } else {
            this.TemplateAlias = templateIdOrAlias;
          }
          this.To = to;
          this.Cc = cc;
          this.Bcc = bcc;
          this.ReplyTo = replyTo;
          this.Tag = tag;
          this.TrackOpens = trackOpens;
          this.TrackLinks = trackLinks;
          this.Headers = headers;
          this.Attachments = attachments;
        }
        return TemplatedMessage2;
      }()
    );
    exports.TemplatedMessage = TemplatedMessage;
    var TemplateFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(TemplateFilteringParameters2, _super);
        function TemplateFilteringParameters2(count, offset, templateType, layoutTemplate) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.templateType = templateType;
          _this.layoutTemplate = layoutTemplate;
          return _this;
        }
        return TemplateFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.TemplateFilteringParameters = TemplateFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/server/Server.js
var require_Server = __commonJS({
  "node_modules/postmark/dist/client/models/server/Server.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateServerRequest = exports.UpdateServerRequest = void 0;
    var UpdateServerRequest = (
      /** @class */
      /* @__PURE__ */ function() {
        function UpdateServerRequest2(Name, Color, SmtpApiActivated, RawEmailEnabled, InboundHookUrl, BounceHookUrl, OpenHookUrl, DeliveryHookUrl, ClickHookUrl, PostFirstOpenOnly, InboundSpamThreshold, TrackOpens, TrackLinks, IncludeBounceContentInHook, EnableSmtpApiErrorHooks, InboundDomain) {
          this.Name = Name;
          this.Color = Color;
          this.SmtpApiActivated = SmtpApiActivated;
          this.RawEmailEnabled = RawEmailEnabled;
          this.InboundHookUrl = InboundHookUrl;
          this.BounceHookUrl = BounceHookUrl;
          this.OpenHookUrl = OpenHookUrl;
          this.DeliveryHookUrl = DeliveryHookUrl;
          this.ClickHookUrl = ClickHookUrl;
          this.PostFirstOpenOnly = PostFirstOpenOnly;
          this.InboundSpamThreshold = InboundSpamThreshold;
          this.InboundDomain = InboundDomain;
          this.TrackOpens = TrackOpens;
          this.TrackLinks = TrackLinks;
          this.IncludeBounceContentInHook = IncludeBounceContentInHook;
          this.EnableSmtpApiErrorHooks = EnableSmtpApiErrorHooks;
        }
        return UpdateServerRequest2;
      }()
    );
    exports.UpdateServerRequest = UpdateServerRequest;
    var CreateServerRequest = (
      /** @class */
      function(_super) {
        __extends(CreateServerRequest2, _super);
        function CreateServerRequest2(Name, Color, SmtpApiActivated, RawEmailEnabled, InboundHookUrl, BounceHookUrl, OpenHookUrl, DeliveryHookUrl, ClickHookUrl, PostFirstOpenOnly, InboundSpamThreshold, TrackOpens, TrackLinks, IncludeBounceContentInHook, EnableSmtpApiErrorHooks, InboundDomain, DeliveryType) {
          var _this = _super.call(this, Name, Color, SmtpApiActivated, RawEmailEnabled, InboundHookUrl, BounceHookUrl, OpenHookUrl, DeliveryHookUrl, ClickHookUrl, PostFirstOpenOnly, InboundSpamThreshold, TrackOpens, TrackLinks, IncludeBounceContentInHook, EnableSmtpApiErrorHooks, InboundDomain) || this;
          _this.DeliveryType = DeliveryType;
          return _this;
        }
        return CreateServerRequest2;
      }(UpdateServerRequest)
    );
    exports.CreateServerRequest = CreateServerRequest;
  }
});

// node_modules/postmark/dist/client/models/server/Servers.js
var require_Servers = __commonJS({
  "node_modules/postmark/dist/client/models/server/Servers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/server/ServerFilteringParameters.js
var require_ServerFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/server/ServerFilteringParameters.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ServerFilteringParameters = void 0;
    var FilteringParameters_1 = require_FilteringParameters();
    var ServerFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(ServerFilteringParameters2, _super);
        function ServerFilteringParameters2(count, offset, name) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.name = name;
          return _this;
        }
        return ServerFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.ServerFilteringParameters = ServerFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/domains/Domain.js
var require_Domain = __commonJS({
  "node_modules/postmark/dist/client/models/domains/Domain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UpdateDomainRequest = exports.CreateDomainRequest = void 0;
    var CreateDomainRequest = (
      /** @class */
      /* @__PURE__ */ function() {
        function CreateDomainRequest2(Name, ReturnPathDomain) {
          this.Name = Name;
          this.ReturnPathDomain = ReturnPathDomain;
        }
        return CreateDomainRequest2;
      }()
    );
    exports.CreateDomainRequest = CreateDomainRequest;
    var UpdateDomainRequest = (
      /** @class */
      /* @__PURE__ */ function() {
        function UpdateDomainRequest2(ReturnPathDomain) {
          this.ReturnPathDomain = ReturnPathDomain;
        }
        return UpdateDomainRequest2;
      }()
    );
    exports.UpdateDomainRequest = UpdateDomainRequest;
  }
});

// node_modules/postmark/dist/client/models/senders/Signature.js
var require_Signature = __commonJS({
  "node_modules/postmark/dist/client/models/senders/Signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateSignatureRequest = exports.UpdateSignatureRequest = void 0;
    var UpdateSignatureRequest = (
      /** @class */
      /* @__PURE__ */ function() {
        function UpdateSignatureRequest2(Name, ReplyToEmail, ReturnPathDomain, ConfirmationPersonalNote) {
          this.Name = Name;
          this.ReplyToEmail = ReplyToEmail;
          this.ReturnPathDomain = ReturnPathDomain;
          this.ConfirmationPersonalNote = ConfirmationPersonalNote;
        }
        return UpdateSignatureRequest2;
      }()
    );
    exports.UpdateSignatureRequest = UpdateSignatureRequest;
    var CreateSignatureRequest = (
      /** @class */
      /* @__PURE__ */ function() {
        function CreateSignatureRequest2(Name, FromEmail, ReplyToEmail, ReturnPathDomain, ConfirmationPersonalNote) {
          this.Name = Name;
          this.ReplyToEmail = ReplyToEmail;
          this.ReturnPathDomain = ReturnPathDomain;
          this.FromEmail = FromEmail;
          this.ConfirmationPersonalNote = ConfirmationPersonalNote;
        }
        return CreateSignatureRequest2;
      }()
    );
    exports.CreateSignatureRequest = CreateSignatureRequest;
  }
});

// node_modules/postmark/dist/client/models/suppressions/Suppression.js
var require_Suppression = __commonJS({
  "node_modules/postmark/dist/client/models/suppressions/Suppression.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/stats/Stats.js
var require_Stats = __commonJS({
  "node_modules/postmark/dist/client/models/stats/Stats.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/stats/StatsFilteringParameters.js
var require_StatsFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/stats/StatsFilteringParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StatisticsFilteringParameters = void 0;
    var StatisticsFilteringParameters = (
      /** @class */
      /* @__PURE__ */ function() {
        function StatisticsFilteringParameters2(tag, fromDate, toDate, messageStream) {
          this.tag = tag;
          this.fromDate = fromDate;
          this.toDate = toDate;
          this.messageStream = messageStream;
        }
        return StatisticsFilteringParameters2;
      }()
    );
    exports.StatisticsFilteringParameters = StatisticsFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/triggers/InboundRule.js
var require_InboundRule = __commonJS({
  "node_modules/postmark/dist/client/models/triggers/InboundRule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateInboundRuleRequest = void 0;
    var CreateInboundRuleRequest = (
      /** @class */
      /* @__PURE__ */ function() {
        function CreateInboundRuleRequest2(Rule) {
          this.Rule = Rule;
        }
        return CreateInboundRuleRequest2;
      }()
    );
    exports.CreateInboundRuleRequest = CreateInboundRuleRequest;
  }
});

// node_modules/postmark/dist/client/models/webhooks/Webhooks.js
var require_Webhooks = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/Webhooks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/Webhook.js
var require_Webhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/Webhook.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateWebhookRequest = exports.UpdateWebhookRequest = void 0;
    var UpdateWebhookRequest = (
      /** @class */
      /* @__PURE__ */ function() {
        function UpdateWebhookRequest2(url, triggers, httpAuth, httpHeaders) {
          this.Url = url;
          this.HttpAuth = httpAuth;
          this.HttpHeaders = httpHeaders;
          this.Triggers = triggers;
        }
        return UpdateWebhookRequest2;
      }()
    );
    exports.UpdateWebhookRequest = UpdateWebhookRequest;
    var CreateWebhookRequest = (
      /** @class */
      function(_super) {
        __extends(CreateWebhookRequest2, _super);
        function CreateWebhookRequest2(url, triggers, httpAuth, httpHeaders, messageStream) {
          var _this = _super.call(this, url, triggers, httpAuth, httpHeaders) || this;
          _this.MessageStream = messageStream;
          return _this;
        }
        return CreateWebhookRequest2;
      }(UpdateWebhookRequest)
    );
    exports.CreateWebhookRequest = CreateWebhookRequest;
  }
});

// node_modules/postmark/dist/client/models/webhooks/WebhookFilteringParameters.js
var require_WebhookFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/WebhookFilteringParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebhookFilteringParameters = void 0;
    var WebhookFilteringParameters = (
      /** @class */
      /* @__PURE__ */ function() {
        function WebhookFilteringParameters2(messageStream) {
          this.messageStream = messageStream;
        }
        return WebhookFilteringParameters2;
      }()
    );
    exports.WebhookFilteringParameters = WebhookFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/BounceWebhook.js
var require_BounceWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/BounceWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/DeliveryWebhook.js
var require_DeliveryWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/DeliveryWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/SpamComplaintWebhook.js
var require_SpamComplaintWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/SpamComplaintWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/ClickWebhook.js
var require_ClickWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/ClickWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/OpenWebhook.js
var require_OpenWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/OpenWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/SubscriptionChangeWebhook.js
var require_SubscriptionChangeWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/SubscriptionChangeWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/webhooks/payload/InboundWebhook.js
var require_InboundWebhook = __commonJS({
  "node_modules/postmark/dist/client/models/webhooks/payload/InboundWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/postmark/dist/client/models/suppressions/SuppressionFilteringParameters.js
var require_SuppressionFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/suppressions/SuppressionFilteringParameters.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SuppressionFilteringParameters = exports.SuppressionOrigin = exports.SuppressionReason = void 0;
    var FilteringParameters_1 = require_FilteringParameters();
    var SuppressionReason;
    (function(SuppressionReason2) {
      SuppressionReason2["HardBounce"] = "HardBounce";
      SuppressionReason2["SpamComplaint"] = "SpamComplaint";
      SuppressionReason2["ManualSuppression"] = "ManualSuppression";
    })(SuppressionReason = exports.SuppressionReason || (exports.SuppressionReason = {}));
    var SuppressionOrigin;
    (function(SuppressionOrigin2) {
      SuppressionOrigin2["Recipient"] = "Recipient";
      SuppressionOrigin2["Customer"] = "Customer";
      SuppressionOrigin2["Admin"] = "Admin";
    })(SuppressionOrigin = exports.SuppressionOrigin || (exports.SuppressionOrigin = {}));
    var SuppressionFilteringParameters = (
      /** @class */
      function(_super) {
        __extends(SuppressionFilteringParameters2, _super);
        function SuppressionFilteringParameters2(count, offset, suppressionReason, origin, emailAddress, fromDate, toDate) {
          if (count === void 0) {
            count = 100;
          }
          if (offset === void 0) {
            offset = 0;
          }
          var _this = _super.call(this, count, offset) || this;
          _this.suppressionReason = suppressionReason;
          _this.origin = origin;
          _this.emailAddress = emailAddress;
          _this.fromDate = fromDate;
          _this.toDate = toDate;
          return _this;
        }
        return SuppressionFilteringParameters2;
      }(FilteringParameters_1.FilteringParameters)
    );
    exports.SuppressionFilteringParameters = SuppressionFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/streams/MessageStream.js
var require_MessageStream = __commonJS({
  "node_modules/postmark/dist/client/models/streams/MessageStream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CreateMessageStreamRequest = exports.UpdateMessageStreamRequest = exports.UnsubscribeHandlingTypes = void 0;
    var UnsubscribeHandlingTypes;
    (function(UnsubscribeHandlingTypes2) {
      UnsubscribeHandlingTypes2["None"] = "None";
      UnsubscribeHandlingTypes2["Postmark"] = "Postmark";
      UnsubscribeHandlingTypes2["Custom"] = "Custom";
    })(UnsubscribeHandlingTypes = exports.UnsubscribeHandlingTypes || (exports.UnsubscribeHandlingTypes = {}));
    var UpdateMessageStreamRequest = (
      /** @class */
      /* @__PURE__ */ function() {
        function UpdateMessageStreamRequest2(name, description, subscriptionManagementConfiguration) {
          this.Name = name;
          this.Description = description;
          this.SubscriptionManagementConfiguration = subscriptionManagementConfiguration;
        }
        return UpdateMessageStreamRequest2;
      }()
    );
    exports.UpdateMessageStreamRequest = UpdateMessageStreamRequest;
    var CreateMessageStreamRequest = (
      /** @class */
      /* @__PURE__ */ function() {
        function CreateMessageStreamRequest2(id, name, messageStreamType, description, subscriptionManagementConfiguration) {
          this.Name = name;
          this.Description = description;
          this.ID = id;
          this.MessageStreamType = messageStreamType;
          this.SubscriptionManagementConfiguration = subscriptionManagementConfiguration;
        }
        return CreateMessageStreamRequest2;
      }()
    );
    exports.CreateMessageStreamRequest = CreateMessageStreamRequest;
  }
});

// node_modules/postmark/dist/client/models/streams/MessageStreamsFilteringParameters.js
var require_MessageStreamsFilteringParameters = __commonJS({
  "node_modules/postmark/dist/client/models/streams/MessageStreamsFilteringParameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MessageStreamsFilteringParameters = void 0;
    var MessageStreamsFilteringParameters = (
      /** @class */
      /* @__PURE__ */ function() {
        function MessageStreamsFilteringParameters2(messageStreamType, includeArchivedStreams) {
          this.messageStreamType = messageStreamType;
          this.includeArchivedStreams = includeArchivedStreams;
        }
        return MessageStreamsFilteringParameters2;
      }()
    );
    exports.MessageStreamsFilteringParameters = MessageStreamsFilteringParameters;
  }
});

// node_modules/postmark/dist/client/models/data_removal/DataRemovals.js
var require_DataRemovals = __commonJS({
  "node_modules/postmark/dist/client/models/data_removal/DataRemovals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DataRemovalRequest = exports.DataRemovalStatusTypes = void 0;
    var DataRemovalStatusTypes;
    (function(DataRemovalStatusTypes2) {
      DataRemovalStatusTypes2["Pending"] = "Pending";
      DataRemovalStatusTypes2["Done"] = "Done";
    })(DataRemovalStatusTypes = exports.DataRemovalStatusTypes || (exports.DataRemovalStatusTypes = {}));
    var DataRemovalRequest = (
      /** @class */
      /* @__PURE__ */ function() {
        function DataRemovalRequest2(requestedBy, requestedFor, notifyWhenCompleted) {
          this.RequestedBy = requestedBy;
          this.RequestedFor = requestedFor;
          this.NotifyWhenCompleted = notifyWhenCompleted;
        }
        return DataRemovalRequest2;
      }()
    );
    exports.DataRemovalRequest = DataRemovalRequest;
  }
});

// node_modules/postmark/dist/client/models/index.js
var require_models = __commonJS({
  "node_modules/postmark/dist/client/models/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ClientOptions(), exports);
    __exportStar(require_SupportingTypes(), exports);
    __exportStar(require_HttpClient(), exports);
    __exportStar(require_Callback(), exports);
    __exportStar(require_DefaultResponse(), exports);
    __exportStar(require_FilteringParameters(), exports);
    __exportStar(require_Bounce(), exports);
    __exportStar(require_BounceFilteringParameters(), exports);
    __exportStar(require_Message(), exports);
    __exportStar(require_SupportingTypes2(), exports);
    __exportStar(require_OutboundMessage(), exports);
    __exportStar(require_OutboundMessageOpen(), exports);
    __exportStar(require_OutboundMessageClick(), exports);
    __exportStar(require_InboundMessage(), exports);
    __exportStar(require_MessageFilteringParameters(), exports);
    __exportStar(require_Template(), exports);
    __exportStar(require_Server(), exports);
    __exportStar(require_Servers(), exports);
    __exportStar(require_ServerFilteringParameters(), exports);
    __exportStar(require_Domain(), exports);
    __exportStar(require_Signature(), exports);
    __exportStar(require_Suppression(), exports);
    __exportStar(require_Stats(), exports);
    __exportStar(require_StatsFilteringParameters(), exports);
    __exportStar(require_InboundRule(), exports);
    __exportStar(require_Webhooks(), exports);
    __exportStar(require_Webhook(), exports);
    __exportStar(require_WebhookFilteringParameters(), exports);
    __exportStar(require_BounceWebhook(), exports);
    __exportStar(require_DeliveryWebhook(), exports);
    __exportStar(require_SpamComplaintWebhook(), exports);
    __exportStar(require_ClickWebhook(), exports);
    __exportStar(require_OpenWebhook(), exports);
    __exportStar(require_SubscriptionChangeWebhook(), exports);
    __exportStar(require_InboundWebhook(), exports);
    __exportStar(require_Suppression(), exports);
    __exportStar(require_SuppressionFilteringParameters(), exports);
    __exportStar(require_MessageStream(), exports);
    __exportStar(require_MessageStreamsFilteringParameters(), exports);
    __exportStar(require_DataRemovals(), exports);
  }
});

// node_modules/postmark/dist/client/errors/index.js
var require_errors = __commonJS({
  "node_modules/postmark/dist/client/errors/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ErrorHandler(), exports);
    __exportStar(require_Errors(), exports);
  }
});

// node_modules/postmark/dist/client/HttpClient.js
var require_HttpClient2 = __commonJS({
  "node_modules/postmark/dist/client/HttpClient.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AxiosHttpClient = void 0;
    var axios_1 = require_axios();
    var models_1 = require_models();
    var index_1 = require_errors();
    var AxiosHttpClient = (
      /** @class */
      function(_super) {
        __extends(AxiosHttpClient2, _super);
        function AxiosHttpClient2(configOptions) {
          var _this = _super.call(this, configOptions) || this;
          _this.errorHandler = new index_1.ErrorHandler();
          return _this;
        }
        AxiosHttpClient2.prototype.initHttpClient = function(configOptions) {
          this.clientOptions = __assign(__assign({}, models_1.HttpClient.DefaultOptions), configOptions);
          var httpClient = axios_1.default.create({
            baseURL: this.getBaseHttpRequestURL(),
            timeout: this.getRequestTimeoutInMilliseconds(),
            responseType: "json",
            maxContentLength: Infinity,
            maxBodyLength: Infinity,
            validateStatus: function(status) {
              return status >= 200 && status < 300;
            }
          });
          httpClient.interceptors.response.use(function(response) {
            return response.data;
          });
          this.client = httpClient;
        };
        AxiosHttpClient2.prototype.httpRequest = function(method, path, queryParameters, body, requestHeaders) {
          var _this = this;
          return this.client.request({
            method,
            url: path,
            data: body,
            headers: requestHeaders,
            params: queryParameters
          }).catch(function(errorThrown) {
            return Promise.reject(_this.transformError(errorThrown));
          });
        };
        AxiosHttpClient2.prototype.transformError = function(errorThrown) {
          var response = errorThrown.response;
          if (response !== void 0) {
            var status_1 = this.adjustValue(0, response.status);
            var errorCode = this.adjustValue(0, response.data.ErrorCode);
            var message = this.adjustValue(errorThrown.message, response.data.Message);
            return this.errorHandler.buildError(message, errorCode, status_1);
          } else if (errorThrown.message !== void 0) {
            return this.errorHandler.buildError(errorThrown.message);
          } else {
            return this.errorHandler.buildError(JSON.stringify(errorThrown, Object.getOwnPropertyNames(errorThrown)));
          }
        };
        AxiosHttpClient2.prototype.getRequestTimeoutInMilliseconds = function() {
          return (this.clientOptions.timeout || 60) * 1e3;
        };
        AxiosHttpClient2.prototype.adjustValue = function(defaultValue, data) {
          return data === void 0 ? defaultValue : data;
        };
        return AxiosHttpClient2;
      }(models_1.HttpClient)
    );
    exports.AxiosHttpClient = AxiosHttpClient;
  }
});

// node_modules/postmark/package.json
var require_package = __commonJS({
  "node_modules/postmark/package.json"(exports, module) {
    module.exports = {
      name: "postmark",
      description: "Official Node.js client library for the Postmark HTTP API - https://www.postmarkapp.com",
      license: "MIT",
      tags: [
        "email",
        "utility",
        "postmark",
        "sending",
        "transactional"
      ],
      version: "4.0.2",
      author: "Igor Balos",
      contributors: [
        "Igor Balos",
        "Andrew Theken",
        "Aaron Blum",
        "Aleksey Aleksandrov",
        "Alex Shepard",
        "Antony Jones",
        "Ben Burwell",
        "Ben Williamson",
        "Chris Williams",
        "Jakub Borys",
        "Mark Nguyen",
        "Matt",
        "Matthew Blackshaw",
        "Matthew Conlen",
        "Ryan Kirkman",
        "Scott Anderson",
        "Sebastien Chopin",
        "Theophane RUPIN",
        "codesplicer",
        "francescoRubini",
        "Matthew Reff"
      ],
      main: "./dist/index.js",
      types: "./dist/index.d.ts",
      directories: {
        lib: "./dist/index.js"
      },
      scripts: {
        compile: "rm -r -f ./dist && node_modules/.bin/tsc",
        test: "node_modules/.bin/mocha --timeout 30000 --retries 1 -r ts-node/register test/**/*test.ts",
        unittest: "node_modules/.bin/mocha --timeout 30000 --retries 1 -r ts-node/register test/unit/**/*test.ts",
        watchtests: "node_modules/.bin/mocha --timeout 30000 --retries 1 -r ts-node/register -R list -w --recursive -G test/**/*test.ts",
        lint: "npx eslint src --ext ts --ignore-pattern 'src/*test*'; exit 0",
        lintfix: "npx eslint src --ext ts --fix --ignore-pattern 'src/test*.ts'; exit 0",
        "compile-docs": "echo 'Generating docs...' && mkdir -p ./docs && rm -r ./docs && node_modules/.bin/typedoc --options typedoc.json && git add -A ./docs && echo 'Generated docs!'"
      },
      homepage: "http://ActiveCampaign.github.io/postmark.js",
      repository: {
        type: "git",
        url: "https://github.com/ActiveCampaign/postmark.js.git"
      },
      bugs: {
        url: "https://github.com/ActiveCampaign/postmark.js/issues"
      },
      precommit: [
        "compile",
        "lint",
        "test",
        "compile-docs"
      ],
      devDependencies: {
        "@types/chai": "^4.3.11",
        "@types/mocha": "^10.0.6",
        "@types/node": "^12.12.6",
        "@types/sinon": "^17.0.2",
        "@typescript-eslint/eslint-plugin": "^5.40.1",
        "@typescript-eslint/parser": "^5.40.1",
        chai: "^4.3.10",
        dotenv: "^16.3.1",
        eslint: "^8.54.0",
        mocha: "^10.2.0",
        "pre-commit": "^1.2.2",
        sinon: "^17.0.1",
        "ts-node": "^10.9.1",
        typedoc: "^0.25.4",
        typescript: "^4.7.4"
      },
      dependencies: {
        axios: "^1.6.2"
      }
    };
  }
});

// node_modules/postmark/dist/client/BaseClient.js
var require_BaseClient = __commonJS({
  "node_modules/postmark/dist/client/BaseClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ErrorHandler_1 = require_ErrorHandler();
    var HttpClient_1 = require_HttpClient2();
    var packageJson = require_package();
    var CLIENT_VERSION = packageJson.version;
    var BaseClient = (
      /** @class */
      function() {
        function BaseClient2(token, authHeader, configOptions) {
          this.errorHandler = new ErrorHandler_1.ErrorHandler();
          this.verifyToken(token);
          this.token = token.trim();
          this.authHeader = authHeader;
          this.clientVersion = CLIENT_VERSION;
          this.httpClient = new HttpClient_1.AxiosHttpClient(configOptions);
        }
        BaseClient2.prototype.setClientOptions = function(configOptions) {
          this.httpClient.initHttpClient(configOptions);
        };
        BaseClient2.prototype.getClientOptions = function() {
          return this.httpClient.clientOptions;
        };
        BaseClient2.prototype.processRequestWithBody = function(method, path, body, callback) {
          return this.processRequest(method, path, {}, body, callback);
        };
        BaseClient2.prototype.processRequestWithoutBody = function(method, path, queryParameters, callback) {
          if (queryParameters === void 0) {
            queryParameters = {};
          }
          return this.processRequest(method, path, queryParameters, null, callback);
        };
        BaseClient2.prototype.processRequest = function(method, path, queryParameters, body, callback) {
          var httpRequest = this.processHttpRequest(method, path, queryParameters, body);
          this.processCallbackRequest(httpRequest, callback);
          return httpRequest;
        };
        BaseClient2.prototype.processHttpRequest = function(method, path, queryParameters, body) {
          return this.httpClient.httpRequest(method, path, queryParameters, body, this.getComposedHttpRequestHeaders()).then(function(response) {
            return response;
          }).catch(function(error) {
            return Promise.reject(error);
          });
        };
        BaseClient2.prototype.processCallbackRequest = function(httpRequest, callback) {
          if (callback) {
            httpRequest.then(function(response) {
              return callback(null, response);
            }).catch(function(error) {
              return callback(error, null);
            });
          }
        };
        BaseClient2.prototype.getComposedHttpRequestHeaders = function() {
          var _a;
          return _a = {}, _a[this.authHeader] = this.token, _a["Accept"] = "application/json", _a["Content-Type"] = "application/json", _a["User-Agent"] = "Postmark.JS - ".concat(this.clientVersion), _a;
        };
        BaseClient2.prototype.verifyToken = function(token) {
          if (!token || token.trim() === "") {
            throw this.errorHandler.buildError("A valid API token must be provided.");
          }
        };
        BaseClient2.prototype.setDefaultPaginationValues = function(filter) {
          filter.count = filter.count || 100;
          filter.offset = filter.offset || 0;
        };
        return BaseClient2;
      }()
    );
    exports.default = BaseClient;
  }
});

// node_modules/postmark/dist/client/AccountClient.js
var require_AccountClient = __commonJS({
  "node_modules/postmark/dist/client/AccountClient.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var BaseClient_1 = require_BaseClient();
    var models_1 = require_models();
    var models_2 = require_models();
    var AccountClient = (
      /** @class */
      function(_super) {
        __extends(AccountClient2, _super);
        function AccountClient2(accountToken, configOptions) {
          return _super.call(this, accountToken, models_1.ClientOptions.AuthHeaderNames.ACCOUNT_TOKEN, configOptions) || this;
        }
        AccountClient2.prototype.getServers = function(filter, callback) {
          if (filter === void 0) {
            filter = new models_2.ServerFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/servers", filter, callback);
        };
        AccountClient2.prototype.getServer = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/servers/".concat(id), {}, callback);
        };
        AccountClient2.prototype.createServer = function(options, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.POST, "/servers", options, callback);
        };
        AccountClient2.prototype.editServer = function(id, options, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.PUT, "/servers/".concat(id), options, callback);
        };
        AccountClient2.prototype.deleteServer = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.DELETE, "/servers/".concat(id), {}, callback);
        };
        AccountClient2.prototype.getDomains = function(filter, callback) {
          if (filter === void 0) {
            filter = new models_1.FilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/domains", filter, callback);
        };
        AccountClient2.prototype.getDomain = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/domains/".concat(id), {}, callback);
        };
        AccountClient2.prototype.createDomain = function(options, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.POST, "/domains/", options, callback);
        };
        AccountClient2.prototype.editDomain = function(id, options, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.PUT, "/domains/".concat(id), options, callback);
        };
        AccountClient2.prototype.deleteDomain = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.DELETE, "/domains/".concat(id), {}, callback);
        };
        AccountClient2.prototype.verifyDomainDKIM = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.PUT, "/domains/".concat(id, "/verifyDKIM"), {}, callback);
        };
        AccountClient2.prototype.verifyDomainReturnPath = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.PUT, "/domains/".concat(id, "/verifyReturnPath"), {}, callback);
        };
        AccountClient2.prototype.verifyDomainSPF = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.POST, "/domains/".concat(id, "/verifySPF"), {}, callback);
        };
        AccountClient2.prototype.rotateDomainDKIM = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.POST, "/domains/".concat(id, "/rotateDKIM"), {}, callback);
        };
        AccountClient2.prototype.getSenderSignature = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/senders/".concat(id), {}, callback);
        };
        AccountClient2.prototype.getSenderSignatures = function(filter, callback) {
          if (filter === void 0) {
            filter = new models_1.FilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/senders", filter, callback);
        };
        AccountClient2.prototype.createSenderSignature = function(options, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.POST, "/senders/", options, callback);
        };
        AccountClient2.prototype.editSenderSignature = function(id, options, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.PUT, "/senders/".concat(id), options, callback);
        };
        AccountClient2.prototype.deleteSenderSignature = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.DELETE, "/senders/".concat(id), {}, callback);
        };
        AccountClient2.prototype.resendSenderSignatureConfirmation = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.POST, "/senders/".concat(id, "/resend"), {}, callback);
        };
        AccountClient2.prototype.verifySenderSignatureSPF = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.POST, "/senders/".concat(id, "/verifySpf"), {}, callback);
        };
        AccountClient2.prototype.requestNewDKIMForSenderSignature = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.POST, "/senders/".concat(id, "/requestNewDkim"), {}, callback);
        };
        AccountClient2.prototype.pushTemplates = function(options, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.PUT, "/templates/push", options, callback);
        };
        AccountClient2.prototype.requestDataRemoval = function(options, callback) {
          return this.processRequestWithBody(models_1.ClientOptions.HttpMethod.POST, "/data-removals", options, callback);
        };
        AccountClient2.prototype.getDataRemovalStatus = function(id, callback) {
          return this.processRequestWithoutBody(models_1.ClientOptions.HttpMethod.GET, "/data-removals/".concat(id), {}, callback);
        };
        return AccountClient2;
      }(BaseClient_1.default)
    );
    exports.default = AccountClient;
  }
});

// node_modules/postmark/dist/client/ServerClient.js
var require_ServerClient = __commonJS({
  "node_modules/postmark/dist/client/ServerClient.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    var BaseClient_1 = require_BaseClient();
    var index_1 = require_models();
    var index_2 = require_models();
    var ServerClient = (
      /** @class */
      function(_super) {
        __extends(ServerClient2, _super);
        function ServerClient2(serverToken, configOptions) {
          return _super.call(this, serverToken, index_1.ClientOptions.AuthHeaderNames.SERVER_TOKEN, configOptions) || this;
        }
        ServerClient2.prototype.sendEmail = function(email, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/email", email, callback);
        };
        ServerClient2.prototype.sendEmailBatch = function(emails, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/email/batch", emails, callback);
        };
        ServerClient2.prototype.sendEmailWithTemplate = function(template, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/email/withTemplate", template, callback);
        };
        ServerClient2.prototype.sendEmailBatchWithTemplates = function(templates, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/email/batchWithTemplates", { Messages: templates }, callback);
        };
        ServerClient2.prototype.getDeliveryStatistics = function(callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/deliveryStats", {}, callback);
        };
        ServerClient2.prototype.getBounces = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.BounceFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/bounces", filter, callback);
        };
        ServerClient2.prototype.getBounce = function(id, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/bounces/".concat(id), {}, callback);
        };
        ServerClient2.prototype.getBounceDump = function(id, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/bounces/".concat(id, "/dump"), {}, callback);
        };
        ServerClient2.prototype.activateBounce = function(id, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.PUT, "/bounces/".concat(id, "/activate"), {}, callback);
        };
        ServerClient2.prototype.getTemplates = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.TemplateFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/templates", filter, callback);
        };
        ServerClient2.prototype.getTemplate = function(idOrAlias, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/templates/".concat(idOrAlias), {}, callback);
        };
        ServerClient2.prototype.deleteTemplate = function(idOrAlias, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.DELETE, "/templates/".concat(idOrAlias), {}, callback);
        };
        ServerClient2.prototype.createTemplate = function(options, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/templates/", options, callback);
        };
        ServerClient2.prototype.editTemplate = function(idOrAlias, options, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.PUT, "/templates/".concat(idOrAlias), options, callback);
        };
        ServerClient2.prototype.validateTemplate = function(options, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/templates/validate", options, callback);
        };
        ServerClient2.prototype.getServer = function(callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/server", {}, callback);
        };
        ServerClient2.prototype.editServer = function(options, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.PUT, "/server", options, callback);
        };
        ServerClient2.prototype.getOutboundMessages = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.OutboundMessagesFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound", filter, callback);
        };
        ServerClient2.prototype.getOutboundMessageDetails = function(messageId, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound/".concat(messageId), {}, callback);
        };
        ServerClient2.prototype.getOutboundMessageDump = function(messageId, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound/".concat(messageId, "/dump"), {}, callback);
        };
        ServerClient2.prototype.getInboundMessages = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.InboundMessagesFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/inbound", filter, callback);
        };
        ServerClient2.prototype.getInboundMessageDetails = function(messageId, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/inbound/".concat(messageId, "/details"), {}, callback);
        };
        ServerClient2.prototype.bypassBlockedInboundMessage = function(messageId, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.PUT, "/messages/inbound/".concat(messageId, "/bypass"), {}, callback);
        };
        ServerClient2.prototype.retryInboundHookForMessage = function(messageId, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.PUT, "/messages/inbound/".concat(messageId, "/retry"), {}, callback);
        };
        ServerClient2.prototype.getMessageOpens = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.OutboundMessageOpensFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound/opens", filter, callback);
        };
        ServerClient2.prototype.getMessageOpensForSingleMessage = function(messageId, filter, callback) {
          if (filter === void 0) {
            filter = new index_2.OutboundMessageOpensFilteringParameters(50, 0);
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound/opens/".concat(messageId), filter, callback);
        };
        ServerClient2.prototype.getMessageClicks = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.OutboundMessageClicksFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound/clicks", filter, callback);
        };
        ServerClient2.prototype.getMessageClicksForSingleMessage = function(messageId, filter, callback) {
          if (filter === void 0) {
            filter = new index_2.OutboundMessageClicksFilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/messages/outbound/clicks/".concat(messageId), filter, callback);
        };
        ServerClient2.prototype.getOutboundOverview = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound", filter, callback);
        };
        ServerClient2.prototype.getSentCounts = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/sends", filter, callback);
        };
        ServerClient2.prototype.getBounceCounts = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/bounces", filter, callback);
        };
        ServerClient2.prototype.getSpamComplaintsCounts = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/spam", filter, callback);
        };
        ServerClient2.prototype.getTrackedEmailCounts = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/tracked", filter, callback);
        };
        ServerClient2.prototype.getEmailOpenCounts = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/opens", filter, callback);
        };
        ServerClient2.prototype.getEmailOpenPlatformUsage = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/opens/platforms", filter, callback);
        };
        ServerClient2.prototype.getEmailOpenClientUsage = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/opens/emailClients", filter, callback);
        };
        ServerClient2.prototype.getEmailOpenReadTimes = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/opens/readTimes", filter, callback);
        };
        ServerClient2.prototype.getClickCounts = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/clicks", filter, callback);
        };
        ServerClient2.prototype.getClickBrowserUsage = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/clicks/browserFamilies", filter, callback);
        };
        ServerClient2.prototype.getClickPlatformUsage = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/clicks/platforms", filter, callback);
        };
        ServerClient2.prototype.getClickLocation = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_2.StatisticsFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/stats/outbound/clicks/location", filter, callback);
        };
        ServerClient2.prototype.createInboundRuleTrigger = function(options, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/triggers/inboundRules", options, callback);
        };
        ServerClient2.prototype.deleteInboundRuleTrigger = function(id, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.DELETE, "/triggers/inboundRules/".concat(id), {}, callback);
        };
        ServerClient2.prototype.getInboundRuleTriggers = function(filter, callback) {
          if (filter === void 0) {
            filter = new index_1.FilteringParameters();
          }
          this.setDefaultPaginationValues(filter);
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/triggers/inboundRules", filter, callback);
        };
        ServerClient2.prototype.getWebhooks = function(filter, callback) {
          if (filter === void 0) {
            filter = {};
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/webhooks", filter, callback);
        };
        ServerClient2.prototype.getWebhook = function(id, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/webhooks/".concat(id), {}, callback);
        };
        ServerClient2.prototype.createWebhook = function(options, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/webhooks", options, callback);
        };
        ServerClient2.prototype.editWebhook = function(id, options, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.PUT, "/webhooks/".concat(id), options, callback);
        };
        ServerClient2.prototype.deleteWebhook = function(id, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.DELETE, "/webhooks/".concat(id), {}, callback);
        };
        ServerClient2.prototype.getMessageStreams = function(filter, callback) {
          if (filter === void 0) {
            filter = {};
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/message-streams", filter, callback);
        };
        ServerClient2.prototype.getMessageStream = function(id, callback) {
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/message-streams/".concat(id), {}, callback);
        };
        ServerClient2.prototype.editMessageStream = function(id, options, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.PATCH, "/message-streams/".concat(id), options, callback);
        };
        ServerClient2.prototype.createMessageStream = function(options, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/message-streams", options, callback);
        };
        ServerClient2.prototype.archiveMessageStream = function(id, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/message-streams/".concat(id, "/archive"), {}, callback);
        };
        ServerClient2.prototype.unarchiveMessageStream = function(id, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/message-streams/".concat(id, "/unarchive"), {}, callback);
        };
        ServerClient2.prototype.getSuppressions = function(messageStream, filter, callback) {
          if (filter === void 0) {
            filter = new index_2.SuppressionFilteringParameters();
          }
          return this.processRequestWithoutBody(index_1.ClientOptions.HttpMethod.GET, "/message-streams/".concat(messageStream, "/suppressions/dump"), filter, callback);
        };
        ServerClient2.prototype.createSuppressions = function(messageStream, options, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/message-streams/".concat(messageStream, "/suppressions"), options, callback);
        };
        ServerClient2.prototype.deleteSuppressions = function(messageStream, options, callback) {
          return this.processRequestWithBody(index_1.ClientOptions.HttpMethod.POST, "/message-streams/".concat(messageStream, "/suppressions/delete"), options, callback);
        };
        return ServerClient2;
      }(BaseClient_1.default)
    );
    exports.default = ServerClient;
  }
});

// node_modules/postmark/dist/index.js
var require_dist = __commonJS({
  "node_modules/postmark/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Header = exports.Attachment = exports.TemplatedMessage = exports.Message = exports.Errors = exports.Models = exports.AdminClient = exports.AccountClient = exports.Client = exports.ServerClient = void 0;
    var AccountClient_1 = require_AccountClient();
    exports.AccountClient = AccountClient_1.default;
    exports.AdminClient = AccountClient_1.default;
    var ServerClient_1 = require_ServerClient();
    exports.ServerClient = ServerClient_1.default;
    exports.Client = ServerClient_1.default;
    var Models = require_models();
    exports.Models = Models;
    var Errors = require_Errors();
    exports.Errors = Errors;
    var models_1 = require_models();
    Object.defineProperty(exports, "Message", { enumerable: true, get: function() {
      return models_1.Message;
    } });
    var models_2 = require_models();
    Object.defineProperty(exports, "TemplatedMessage", { enumerable: true, get: function() {
      return models_2.TemplatedMessage;
    } });
    var models_3 = require_models();
    Object.defineProperty(exports, "Attachment", { enumerable: true, get: function() {
      return models_3.Attachment;
    } });
    var models_4 = require_models();
    Object.defineProperty(exports, "Header", { enumerable: true, get: function() {
      return models_4.Header;
    } });
  }
});
export default require_dist();
//# sourceMappingURL=postmark.js.map
